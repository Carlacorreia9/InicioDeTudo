* {
   margin: 0;
    padding: 0;
}

p {
    font-size: 1.2rem;
    line-height: 1.5rem;
    color: #333;
}
h1 {
    font-size: 2rem;
    line-height: 2.5rem;
}

[meu-atributo] {
    background-color: #f0f0f0;
    padding: 10px;
    border-radius: 5px;
}
h1[meu-atributo] {
    color: blue;

}

.heading {       
    background-color: #434147;
    padding: 10px;
    border-radius: 5px;
    transition: all 0.3s ease-in-out;

}

.heading:hover {
    background-color: #2cdb14;
    color: #fff;
    cursor: pointer;
}

a {
    text-decoration: none;
    color: #000;
}
a:hover {
    color: #2cdb14;
}

a:active {
    color: #ff0000;
}
a:visited {
    color: #0000ff;
}

input[type="text"] {
    width: 80%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
    margin-bottom: 10px;
    box-shadow: white 0px 0px 5px;
}

p:not(.meio) {
    font-size: 1.2rem;
    line-height: 1.5rem;
    color: #0227f7;
}

input:not(:checked) + p {
   background: yellow  ;
}

ul li:nth-child(even) {
    background-color: #c40ffc;
}

ul li:nth-child(odd) {
    background-color: #ff0f0f;
}

ul li:nth-child(3n) {
    background-color: #330ffc;
}

ul li::after {
    content: " - item";
    color: #000000;
}

p::first-letter {
    font-size: 50px;
    font-weight: bold;
    color: #0400ff;
    display: block;
    float: left;
    margin: 0 10px 10px 0;
    
}

p::first-line {
    font-size: 20px;
    font-weight: bold;
    color: #ff7300;
    display: block;
    float: left;
    margin: 0 10px 10px 0;
    
}

p::selection {
    background: #00ffea;
    color: #fff;
}
p::marker {
    color: #eeff00;
    font-size: 20px;
    font-weight: bold;
}

p::placeholder {
    color: #7e4c02;
    font-size: 20px;
    font-weight: bold;
}

/*
Especificidade:
ID     Classes, Atributos, Pseudo-classes,     Pseudo-elementos, Elementos
1      0                                       0
*/
 #p {
    background-color: #ff7300;
 }

    #p.p {
        background: greenyellow;
    }

    /*Herança e as propriedades do box-Model largura, altura, padding, margin, border*/

    #texto {
        font-family: sans-serif;
        color: #000;
    }

/*
Propriedade específicas do Box-Model (largura, altura, padding, border e margin)
    Largura e altura: width, height, max-width, max-height, min-width, min-height
    Padding: padding-top, padding-right, padding-bottom, padding-left
    Margin: margin-top, margin-right, margin-bottom, margin-left
    Border: border-top, border-right, border-bottom, border-left
    Propriedades de borda: border-width, border-style, border-color
*/

.box-model {
   display: block;
   background: #00ffea;
    width: 50%;
    height: 50%;
    overflow: auto;
    padding: 20px;
    margin: 20px auto;
}

/*
box-sizing: content-box;
box-sizing: border-box;
box-sizing: padding-box;
box-sizing: inherit;

max-width: 100%;
max-height: 100%;
min-width: 100%;
min-height: 100%;
margin: 0 auto 50px auto;
São propriedades que definem o tamanho máximo e mínimo de um elemento.
max-width: 100% significa que o elemento não pode ser maior que 100% da largura do seu elemento pai.
max-height: 100% significa que o elemento não pode ser maior que 100% da altura do seu elemento pai.
min-width: 100% significa que o elemento não pode ser menor que 100% da largura do seu elemento pai.
O box-sizing é uma propriedade que define como o tamanho de um elemento é calculado.
O valor content-box significa que o tamanho do elemento é calculado apenas com base no conteúdo, sem incluir o padding e a borda.
O valor border-box significa que o tamanho do elemento é calculado com base no conteúdo, incluindo o padding e a borda. O valor padding-box significa que o tamanho do elemento é calculado com base no conteúdo e no padding, mas não na borda. O valor inherit significa que o elemento herda o valor do seu elemento pai.
O valor initial significa que o elemento usa o valor padrão da propriedade.

*/


/*
Float e Display (Block, Inline-Block e Inline)
*/
.grid-container::after {
    content: "";
    clear: both;
    display: table;
}
.grid-container .col {
display: block;
width: 300px;
height: 300px;
background-color: #0400ff;
margin: 30px;
float: left;
}

.grid .col {
width: 33.33%;
height: 300px;
box-sizing: border-box;
padding: 15px; 
float: left;
}

.grid .col-content {
    width: 100%;
    height: 100%;
    background: #ff7300;
    }

    @media (max-width: 320px) and (max-height: 768px) {
        .grid .col {
            width: 100%;
            height: 300px;
            margin: 0;
        }
        
    }

.grid::after {
    content: "";
    clear: both;
    display: table;
}

.grid {
    padding: 15px;
}

/*
 Propriedades para textos
*/

p {
    font-size: 20px;
    font-weight: bold;
    color: #000;
    text-align: center;
    text-decoration: underline;
    text-transform: uppercase;
    text-indent: 20px;
    text-shadow: 2px 2px 2px #000;
    text-overflow: ellipsis;
    text-align-last: center;
    text-justify: inter-word;
    text-decoration-line: underline overline line-through;
}

/*
Posicionamento - Position
*/

.pai{}

.filha1, .filha2{
    width: 300px;
    height: 300px;
    background-color: #ff00ea;
    margin: 10px;
    position: static;
}

.filha2{
    background-color: #00ff37;
}

.filha1{
    position: relative;
    top: 50px;
    left: 50px;
}

/*
position: absolute; é para posicionar o elemento em relação ao seu elemento pai mais próximo que tenha position: relative; ou position: absolute;.
position: fixed; é para posicionar o elemento em relação à janela do navegador. O elemento ficará fixo na tela, mesmo quando a página for rolada.
position: sticky; é para posicionar o elemento em relação à janela do navegador, mas o elemento ficará fixo na tela apenas quando a página for rolada até ele. O elemento ficará fixo na tela até que o elemento pai saia da tela.
position: inherit; é para herdar o valor da propriedade position do elemento pai.
position: initial; é para usar o valor padrão da propriedade position.
position: unset; é para remover o valor da propriedade position, fazendo com que o elemento use o valor padrão da propriedade position.
position: relative; é para posicionar o elemento em relação à sua posição original. O elemento será deslocado em relação à sua posição original, mas o espaço que ele ocupava ainda será reservado na página.
position: absolute; é para posicionar o elemento em relação ao seu elemento pai mais próximo que tenha position: relative; ou position: absolute;. O elemento será removido do fluxo normal da página e não ocupará espaço na página. O espaço que ele ocupava será preenchido por outros elementos. O elemento será posicionado em relação ao seu elemento pai mais próximo que tenha position: relative; ou position: absolute;.
position: fixed; é para posicionar o elemento em relação à janela do navegador. O elemento ficará fixo na tela, mesmo quando a página for rolada. O elemento será removido do fluxo normal da página e não ocupará espaço na página. O espaço que ele ocupava será preenchido por outros elementos. O elemento será posicionado em relação à janela do navegador.
*/

/*
Media queries e breakpoints
*/


/*
 Uma breve junção de tudo aprendido até aqui
*/

.menu {
    width: 100%;
    background-color: #000000;
    
}